head	7.3;
access;
symbols
	CSC60:1.1.1.1 ECS:1.1.1;
locks; strict;
comment	@ * @;


7.3
date	2014.05.19.04.10.59;	author parallels;	state Exp;
branches;
next	7.1;
commitid	10053798452137649CC;

7.1
date	2014.05.02.04.56.11;	author parallels;	state Exp;
branches;
next	6.1;
commitid	1005363256B2C77085D;

6.1
date	2014.04.18.05.13.34;	author parallels;	state Exp;
branches;
next	5.1;
commitid	1005350B47E1D525B15;

5.1
date	2014.04.01.01.11.12;	author parallels;	state Exp;
branches;
next	4.1;
commitid	100533A12300C819CE3;

4.1
date	2014.03.09.06.00.52;	author parallels;	state Exp;
branches;
next	3.1;
commitid	100531C03943D68B573;

3.1
date	2014.03.09.05.17.57;	author parallels;	state Exp;
branches;
next	2.3;
commitid	100531BF9853ADF9391;

2.3
date	2014.03.09.04.06.12;	author parallels;	state Exp;
branches;
next	2.2;
commitid	100531BE8B43694BC96;

2.2
date	2014.03.09.03.38.27;	author parallels;	state Exp;
branches;
next	2.1;
commitid	100531BE23309CD4A3E;

2.1
date	2014.03.06.23.42.32;	author martinj;	state Exp;
branches;
next	1.1;

1.1
date	2014.03.06.23.38.34;	author martinj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.06.23.38.34;	author martinj;	state Exp;
branches;
next	;


desc
@@


7.3
log
@Almost Done
@
text
@/***************************************************
Programmer's name: Joe Martinez
FileName: shutil.c
Purpose: Provide additional necessary utilities for the main processing shell
commands
Description: Contains additional necessary functions necessary to creating
a working shell from the executable.
***************************************************/
#include "shell.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <pwd.h>
#include <fcntl.h>
#include <limits.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/resource.h>
#include <sys/wait.h>

void stripcrlf(char *temp)
{
  while (temp[0] && 
        ((temp[strlen(temp)-1] == 13) || (temp[strlen(temp)-1] == 10))) {
    temp[strlen(temp)-1] = 0;
  }
}

char *gethomedir(void)
{
  static char homedir[_POSIX_PATH_MAX * 2]; /* Just to be safe. */
  struct passwd *pws;

  pws = getpwuid(getuid());
  if (!pws) {
    fprintf(stderr, "getpwuid() on %d failed", (int) getuid());
    exit(255);
  }

  strcpy(homedir, pws->pw_dir);
  return homedir;
}

char *getuserhomedir(char *user)
{
  static char homedir[_POSIX_PATH_MAX * 2]; /* Just to be safe. */
  struct passwd *pws;

  pws = getpwnam(user);
  if (!pws) {
    fprintf(stderr, "getpwnam() on %s failed", user);
    exit(255);
  }

  strcpy(homedir, pws->pw_dir);
  return homedir;
}

void signal_c_init(void)
{
  struct sigaction act;
  
  sigemptyset(&act.sa_mask);
  act.sa_flags = SA_RESTART;

  act.sa_handler = (void *)waitchildren;
  sigaction(SIGCHLD, &act, NULL);
}

void waitchildren(int signum)
{
  while (wait3((int *)NULL,
               WNOHANG,
               (struct rusage *)NULL) > 0) {}
}

/* Check to see whether or not we should run in background */

int checkbackground(char *cmdline)
{
  /* First, strip off any trailing spaces (this has not yet been run
     through strtok) */

  striptrailingchar(cmdline, ' ');

  /* We are looking for an ampersand at the end of the command. */

  if (cmdline[strlen(cmdline)-1] == '&') {
    cmdline[strlen(cmdline)-1] = 0; /* Remove the ampersand from the command */
    return 1;            /* Indicate that this is background mode */
  }
  return 0;
}

void striptrailingchar(char *temp, char tc)
{
  while (temp[0] && (temp[strlen(temp)-1] == tc)) {
    temp[strlen(temp)-1] = 0;
  }
}
@


7.1
log
@Not done
@
text
@@


6.1
log
@Search not working
@
text
@@


5.1
log
@History Functions
@
text
@@


4.1
log
@finished assignment 3
@
text
@@


3.1
log
@new .a files in lib directory
@
text
@@


2.3
log
@jmsh?
@
text
@@


2.2
log
@jmsh edit
@
text
@@


2.1
log
@Log message
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@First import
@
text
@@
